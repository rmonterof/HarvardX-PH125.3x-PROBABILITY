> # 4.1 The Big Short: Interest Rates Explained
> # Code: Interest rate sampling model
> n <- 1000
> loss_per_foreclosure <- -200000
> p <- 0.02
> defaults <- sample( c(0,1), n, prob=c(1-p, p), replace = TRUE)
> sum(defaults * loss_per_foreclosure)
[1] -4800000
> 
> 
> # Code: Interest rate Monte Carlo simulation
> B <- 10000
> losses <- replicate(B, {
+   defaults <- sample( c(0,1), n, prob=c(1-p, p), replace = TRUE) 
+   sum(defaults * loss_per_foreclosure)
+ })
> 
> 
> # Code: Plotting expected losses
> library(tidyverse)
> data.frame(losses_in_millions = losses/10^6) %>%
+   ggplot(aes(losses_in_millions)) +
+   geom_histogram(binwidth = 0.6, col = "black")
> 
> 
> # Code: Expected value and standard error of the sum of 1,000 loans
> n*(p*loss_per_foreclosure + (1-p)*0)    # expected value 
[1] -4e+06
> sqrt(n)*abs(loss_per_foreclosure)*sqrt(p*(1-p))    # standard error
[1] 885437.7
> 
> 
> # Code: Expected value and standard error of the sum of 1,000 loans
> n*(p*loss_per_foreclosure + (1-p)*0)    # expected value 
[1] -4e+06
> sqrt(n)*abs(loss_per_foreclosure)*sqrt(p*(1-p))    # standard error
[1] 885437.7
> 
> 
> # Code: Calculating interest rates for expected value of 0
> # We can calculate the amount  x  to add to each loan so that the expected value is 0 using the 
> # equation  lp+x(1-p)=0 . Note that this equation is the definition of expected value given a 
> # loss per foreclosure  l  with foreclosure probability  p  and profit  x  if there is no 
> # foreclosure (probability  1-p ).
> 
> # We solve for  x=-lp1-p  and calculate  x :
>   
> x = - loss_per_foreclosure*p/(1-p)
> x
[1] 4081.633
> 
> # On a $180,000 loan, this equals an interest rate of:
> x/180000
[1] 0.02267574
> 
> # Code: Calculating interest rate for 1% probability of losing money
> l <- loss_per_foreclosure
> z <- qnorm(0.01)
> x <- -l*( n*p - z*sqrt(n*p*(1-p)))/ ( n*(1-p) + z*sqrt(n*p*(1-p)))\x
Error: unexpected input in "x <- -l*( n*p - z*sqrt(n*p*(1-p)))/ ( n*(1-p) + z*sqrt(n*p*(1-p)))\"
> x/180000    # interest rate
[1] 0.02267574
> loss_per_foreclosure*p + x*(1-p)    # expected value of the profit per loan
[1] 0
> n*(loss_per_foreclosure*p + x*(1-p)) # expected value of the profit over n loans
[1] 0
> 
> 
> # Code: Monte Carlo simulation for 1% probability of losing money
> # Note that your results will vary from the video because the seed is not set.
> 
> B <- 100000
> profit <- replicate(B, {
+   draws <- sample( c(x, loss_per_foreclosure), n, 
+                    prob=c(1-p, p), replace = TRUE) 
+   sum(draws)
+ })
> mean(profit)    # expected value of the profit over n loans
[1] 1110.204
> mean(profit<0)    # probability of losing money
[1] 0.44171
> 
> 
> 
> 
> # 4.2.2 The Big Short 
> # Code: Expected value with higher default rate and interest rate
> p <- .04
> loss_per_foreclosure <- -200000
> r <- 0.05
> x <- r*180000
> loss_per_foreclosure*p + x*(1-p)
[1] 640
> 
> 
> # Code: Calculating number of loans for desired probability of losing money
> # The number of loans required is:
>   
>   z <- qnorm(0.01)
> l <- loss_per_foreclosure
> n <- ceiling((z^2*(x-l)^2*p*(1-p))/(l*p + x*(1-p))^2)
> n    # number of loans required
[1] 22163
> n*(loss_per_foreclosure*p + x * (1-p))    # expected profit over n loans
[1] 14184320
> 
> 
> # Code: Monte Carlo simulation with known default probability
> # This Monte Carlo simulation estimates the expected profit given a known probability of default
> # p=0.04 . Note that your results will differ from the video because the seed is not set.
> 
> B <- 10000
> p <- 0.04
> x <- 0.05 * 180000
> profit <- replicate(B, {
+   draws <- sample( c(x, loss_per_foreclosure), n, 
+                    prob=c(1-p, p), replace = TRUE) 
+   sum(draws)
+ })
> 
> mean(profit)
[1] 14332292
> # Code: Monte Carlo simulation with unknown default probability
> # This Monte Carlo simulation estimates the expected profit given an unknown probability of 
> # default  0.03=p=0.05 , modeling the situation where an event changes the probability of default
> # for all borrowers simultaneously. Note that your results will differ from the video because 
> # the seed is not set.
> 
> p <- 0.04
> x <- 0.05*180000
> profit <- replicate(B, {
+   new_p <- 0.04 + sample(seq(-0.01, 0.01, length = 100), 1)
+   draws <- sample( c(x, loss_per_foreclosure), n, 
+                    prob=c(1-new_p, new_p), replace = TRUE)
+   sum(draws)
+ })
> mean(profit)    # expected profit
[1] 13844089
> mean(profit < 0)    # probability of losing money
[1] 0.3505
> mean(profit < -10000000)    # probability of losing over $10 million
[1] 0.2419